@page "/historical-scanned-barcodes"
@using Arista_ZebraTablet.Shared.Services

@inject IScannedBarcodeService ScannedBarcodeService

<PageTitle>Historical Scanned Barcodes | @AppConstant.AppTitle</PageTitle>

<!-- Page Header-->
<PageHeader Title="Historical Scanned Barcodes">
    <SubtitleContent>
        <MudText Typo="Typo.body2" Class="text-muted">View the history of the scanned barcode value.</MudText>
    </SubtitleContent>
</PageHeader>

<MudGrid Spacing="4">
    <!-- Scanned Barcode Data Grid -->
    <MudItem xs="12">
        <MudCard Elevation="25">
            <MudCardContent>
                <MudDataGrid
                    T="ScannedBarcode"
                    Items="scannedBarcodeList"
                    Loading="@isTableLoading"
                    SortMode="SortMode.Single"
                    ColumnResizeMode="ResizeMode.Column"
                    Elevation="0"
                    Hover
                    Dense
                >
                    <LoadingContent>
                        <MudText>Loading data...</MudText>
                    </LoadingContent>
                    <NoRecordsContent>
                        <MudText>No data available</MudText>
                    </NoRecordsContent>
                    @* <ColGroup>
                        <col style="min-width: 350px" />
                        <col style="min-width: 300px" />
                        <col style="min-width: 210px" />
                        <col style="min-width: 200px" />
                        <col style="width: 0" />
                    </ColGroup> *@
                    <Columns>
                        <PropertyColumn Property="x => x.ScannedTime" Title="Scanned Time" HeaderClass="text-nowrap" />
                        <PropertyColumn Property="x => x.Value" HeaderClass="text-nowrap" />
                        <PropertyColumn Property="x => x.Category" HeaderClass="text-nowrap" />
                        <TemplateColumn>
                            <CellTemplate>
                                <MudStack Row Spacing="1">
                                    <MudIconButton
                                        Size="@Size.Small"
                                        Icon="@Icons.Material.Rounded.DeleteOutline"
                                        OnClick="() => DeleteScannedBarcode(context.Item.Id)"
                                        title="Remove Scanned Barcode"
                                    />
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="ScannedBarcode" />
                    </PagerContent>
                </MudDataGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    // Variable declaration & initialization
    private bool isTableLoading = true;
    private List<ScannedBarcode> scannedBarcodeList = new();

    // Action on component initialization
    protected override async Task OnInitializedAsync()
    {
        await LoadScannedBarcodeList();
    }

    // Load the historical scanned barcode list
    private async Task LoadScannedBarcodeList()
    {
        isTableLoading = true;
        try
        {
            var response = await ScannedBarcodeService.GetScannedBarcodeListAsync();
            if (!response.Success)
            {
                Snackbar.Add(response.Message ?? "Failed to load scanned barcodes.", Severity.Error);
                return;
            }
            scannedBarcodeList = response.Data ?? new();
        }
        finally
        {
            isTableLoading = false;
        }
    }

    // Apply the filter to the list.
    private async Task ApplyFilter() => await LoadScannedBarcodeList();

    // Delete the scanned barcode.
    private async Task DeleteScannedBarcode(int scannedBarcodeId)
    {
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { x => x.ContentText, "Are you sure you want to delete this scanned barcode? This action is permanent and cannot be undone." },
            { x => x.SubmitBtnText, "Delete" },
            { x => x.DialogIcon, Icons.Material.Rounded.Warning },
            { x => x.DialogIconColor, Color.Error }
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Delete Confirmation", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                // Delete the scanned barcode
                var response = await ScannedBarcodeService.DeleteScannedBarcodeAsync(scannedBarcodeId);
                if (response.Success)
                {
                    Snackbar.Add(response.Message ?? "Scanned barcode deleted successfully.", Severity.Success);

                    // refresh the list of scanned barcode
                    await LoadScannedBarcodeList();
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add(response.Message ?? "Failed to delete scanned barcode.", Severity.Error);
                }
            }
            catch
            {
                Snackbar.Add("An unexpected error occurred while deleting the scanned barcode. Please try again.", Severity.Error);
            }
        }
    }
}