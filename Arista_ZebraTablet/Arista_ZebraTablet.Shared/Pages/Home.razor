@page "/"

@* @using System.Net.Http.Headers
@using System.Text.Json
@using System.Text.Json.Serialization *@
@using Arista_ZebraTablet.Shared.Application.DTOs
@using Arista_ZebraTablet.Shared.Application.ViewModels
@using Arista_ZebraTablet.Shared.Application.Enums
@using Arista_ZebraTablet.Shared.Services

@inject IFormFactor FormFactor
@* @inject HttpClient Http *@

<PageTitle>ARISTA - Batch Barcode Scanner</PageTitle>

<MudGrid Spacing="5">
    <MudItem xs="12">
        <MudPaper Class="pa-5" Elevation="0">
            <MudStack Spacing="3" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudStack Spacing="3" AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h5" Class="fw-bold">Scan Barcode</MudText>
                    <MudText Typo="Typo.body2" Class="text-secondary">
                        Upload one or more product images to detect barcodes.
                        Works on @factor using @platform.
                    </MudText>
                </MudStack>

                <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                    <MudButton
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        Disabled="@(!SelectedImageFiles.Any() || IsBusy)"
                        DropShadow="false"
                    >
                        @(IsBusy ? "Processing..." : "Scan")
                    </MudButton>

                    <MudButton
                        Variant="Variant.Outlined"
                        Color="Color.Secondary"
                        Disabled="@(!SelectedImageFiles.Any() || IsBusy)"
                    >
                        Clear All
                    </MudButton>
                </MudStack>
            </MudStack>

            <MudCollapse Expanded="IsBusy">
                <MudProgressLinear Class="mt-3" Value="@Progress" Color="Color.Info" Min="0" Max="100" Rounded />
            </MudCollapse>
        </MudPaper>
    </MudItem>

    <!-- File picker -->
    <MudItem xs="12" sm="6" md="4" lg="4">
        <MudFileUpload
            T="IReadOnlyList<IBrowserFile>"
            Accept=".jpg,.jpeg,.png,.heic,.heif,image/*"
            FilesChanged="UploadImageFiles"
        >
            <ActivatorContent>
                <MudButton
                    StartIcon="@Icons.Material.Filled.CloudUpload"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    Size="Size.Large"
                    DropShadow="false"
                    FullWidth
                >
                    Upload Image Files
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>
    </MudItem>

    <!-- SelectedImageFiles preview (compact horizontal cards) -->
    @if (SelectedImageFiles.Any())
    {
        <MudItem xs="12">
            <MudStack Spacing="1">
                @foreach (var img in SelectedImageFiles)
                {
                    <MudCard Elevation="1"
                             Class="d-flex align-center pa-2"
                             Style="max-height:84px; min-height:72px;">
                    
                        @if (!string.IsNullOrWhiteSpace(img.PreviewDataUrl))
                        {
                            <MudImage Src="@img.PreviewDataUrl"/>
                        }
                        else
                        {
                            <MudAvatar Icon="@Icons.Material.Filled.Image"
                                       Size="Size.Large"
                                       Color="Color.Default"
                                       Class="me-2" />
                        }

                        <MudStack Spacing="1" Class="overflow-hidden">
                            <MudText Typo="Typo.subtitle2"
                                     Style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">
                                @img.FileName
                            </MudText>

                            <MudStack Row Spacing="1">
                                <MudChip T="BarcodeDto" Color="@StateColor(img.State)">
                                    @StateLabel(img.State)
                                </MudChip>

                                @if (img.State == FileState.Done && (img.Result?.Barcodes?.Any() ?? false))
                                {
                                    <MudChip T="BarcodeDto" Color="Color.Success" Variant="Variant.Outlined">
                                        @($"{img.Result!.Barcodes.Count} detected")
                                    </MudChip>
                                }
                            </MudStack>

                            @if (img.State == FileState.Error && !string.IsNullOrWhiteSpace(img.ErrorMessage))
                            {
                                <MudText Typo="Typo.caption" Color="Color.Error">@img.ErrorMessage</MudText>
                            }
                        </MudStack>

                        <MudSpacer />

                        <!-- Optional delete button -->
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       Disabled="@IsBusy"
                                       OnClick="@(() => Remove(img.Id))" />
                    </MudCard>
                }
            </MudStack>
        </MudItem>
    }

    @* <!-- Results -->
    @if (SelectedImageFiles.Any(s => s.Result is not null || s.State == FileState.Error))
    {
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6">Results</MudText>

                @foreach (var item in SelectedImageFiles)
                {
                    <MudDivider Class="my-3" />

                    <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                        <MudText Typo="Typo.subtitle1">@item.FileName</MudText>
                        <MudChip T="BarcodeDto" Color="@StateColor(item.State)" Variant="Variant.Outlined" Dense>
                            @StateLabel(item.State)
                        </MudChip>
                    </MudStack>

                    @if (item.State == FileState.Error)
                    {
                        <MudAlert Severity="Severity.Error" Class="mt-2">@item.ErrorMessage</MudAlert>
                    }
                    else if (item.Result?.Barcodes?.Any() ?? false)
                    {
                        <MudTable T="BarcodeDto" Dense Hover Class="mt-2">
                            <HeaderContent>
                                <MudTh>#</MudTh>
                                <MudTh>Value</MudTh>
                                <MudTh>Symbology</MudTh>
                                <MudTh>Confidence</MudTh>
                            </HeaderContent>
                            <ChildRowContent>
                                @for (int i = 0; i < item.Result!.Barcodes.Count; i++)
                                {
                                    var b = item.Result.Barcodes[i];
                                    <MudTr>
                                        <MudTd>@(i + 1)</MudTd>
                                        <MudTd>@b.Value</MudTd>
                                        <MudTd>@(b.Symbology ?? "—")</MudTd>
                                        <MudTd>@(b.Confidence is null ? "—" : $"{b.Confidence:P0}")</MudTd>
                                    </MudTr>
                                }
                            </ChildRowContent>
                        </MudTable>
                    }
                    else if (item.State == FileState.Done)
                    {
                        <MudText Typo="Typo.body2" Class="text-secondary mt-1">No barcodes</MudText>
                    }
                }
            </MudPaper>
        </MudItem>
    } *@
</MudGrid>

@code {
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();

    // WebApp: relative OK. MAUI: make this ABSOLUTE (e.g., "https://api.example.com/api/barcodes/detect").
    private const string ApiEndpoint = "/api/barcodes/detect";

    private const long MaxFileBytes = 20L * 1024 * 1024; // 20 MB per file
    private static readonly string[] AllowedContentTypes = { "image/jpeg", "image/png", "image/heic", "image/heif" };

    private List<UploadItem> SelectedImageFiles { get; } = new();
    private bool IsBusy { get; set; }
    private int Progress { get; set; }

    // MULTI-FILE handler (preferred)
    private async Task UploadImageFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
            await AddFileAsync(file);
    }

    // If you change T="IBrowserFile", use this single-file overload instead:
    // private async Task UploadImageFiles(IBrowserFile file) => await AddFileAsync(file);

    private async Task AddFileAsync(IBrowserFile file)
    {
        var ct = string.IsNullOrWhiteSpace(file.ContentType) ? "image/jpeg" : file.ContentType.ToLowerInvariant();
        if (!AllowedContentTypes.Contains(ct) && !ct.StartsWith("image/"))
            return;

        try
        {
            await using var read = file.OpenReadStream(MaxFileBytes);
            using var ms = new MemoryStream();
            await read.CopyToAsync(ms);

            var bytes = ms.ToArray();
            var preview = $"data:{ct};base64,{Convert.ToBase64String(bytes)}";

            SelectedImageFiles.Add(new UploadItem
            {
                Id = Guid.NewGuid(),
                FileName = string.IsNullOrWhiteSpace(file.Name) ? $"{Guid.NewGuid():N}.jpg" : file.Name,
                ContentType = ct,
                Bytes = bytes,
                PreviewDataUrl = preview,
                State = FileState.Ready
            });
        }
        catch (Exception ex)
        {
            SelectedImageFiles.Add(new UploadItem
            {
                Id = Guid.NewGuid(),
                FileName = file.Name ?? "image",
                ContentType = ct,
                Bytes = null,
                PreviewDataUrl = null,
                State = FileState.Error,
                ErrorMessage = ex.Message
            });
        }
        StateHasChanged();
    }

    private void Remove(Guid id)
    {
        var i = SelectedImageFiles.FindIndex(x => x.Id == id);
        if (i >= 0) SelectedImageFiles.RemoveAt(i);
    }

    // private void ClearAll()
    // {
    //     SelectedImageFiles.Clear();
    //     IsBusy = false;
    //     Progress = 0;
    // }

    // private async Task SendToPythonAsync()
    // {
    //     if (IsBusy || !SelectedImageFiles.Any()) return;

    //     try
    //     {
    //         IsBusy = true;
    //         Progress = 5;

    //         using var form = new MultipartFormDataContent();
    //         int idx = 0;
    //         foreach (var item in SelectedImageFiles)
    //         {
    //             if (item.Bytes is null) continue;
    //             item.State = FileState.Uploading;

    //             var content = new ByteArrayContent(item.Bytes);
    //             content.Headers.ContentType = new MediaTypeHeaderValue(item.ContentType ?? "image/jpeg");
    //             form.Add(content, "files", item.FileName);

    //             idx++;
    //             Progress = Math.Clamp(5 + (int)((double)idx / SelectedImageFiles.Count * 40), 5, 50);
    //         }

    //         var resp = await Http.PostAsync(ApiEndpoint, form);
    //         var text = await resp.Content.ReadAsStringAsync();

    //         List<DetectResponseItem>? items = null;
    //         try
    //         {
    //             items = JsonSerializer.Deserialize<List<DetectResponseItem>>(text, JsonOptions());
    //         }
    //         catch
    //         {
    //             try
    //             {
    //                 var envelope = JsonSerializer.Deserialize<DetectResponseEnvelope>(text, JsonOptions());
    //                 items = envelope?.Items;
    //             }
    //             catch { /* fall through */ }
    //         }

    //         Progress = 75;

    //         if (items is not null)
    //         {
    //             var byName = items
    //                 .Where(x => !string.IsNullOrWhiteSpace(x.FileName))
    //                 .ToDictionary(x => x.FileName!, StringComparer.OrdinalIgnoreCase);

    //             foreach (var item in SelectedImageFiles)
    //             {
    //                 if (item.Bytes is null) { item.State = FileState.Error; continue; }

    //                 if (byName.TryGetValue(item.FileName!, out var r))
    //                 {
    //                     if (!string.IsNullOrWhiteSpace(r.Error))
    //                     {
    //                         item.State = FileState.Error;
    //                         item.ErrorMessage = r.Error;
    //                     }
    //                     else
    //                     {
    //                         item.Result ??= new DetectResult();
    //                         item.Result.Barcodes = r.Barcodes?.Select(b => new BarcodeDto
    //                         {
    //                             Value = b.Value,
    //                             Symbology = b.Symbology,
    //                             Confidence = b.Confidence
    //                         }).ToList() ?? new();
    //                         item.State = FileState.Done;
    //                     }
    //                 }
    //                 else
    //                 {
    //                     item.Result ??= new DetectResult { Barcodes = new() };
    //                     item.State = FileState.Done;
    //                 }
    //             }
    //         }
    //         else
    //         {
    //             foreach (var item in SelectedImageFiles)
    //             {
    //                 item.State = FileState.Error;
    //                 item.ErrorMessage ??= $"Server response: {text}";
    //             }
    //         }

    //         Progress = 100;
    //     }
    //     catch (Exception ex)
    //     {
    //         foreach (var item in SelectedImageFiles)
    //         {
    //             item.State = FileState.Error;
    //             item.ErrorMessage ??= ex.Message;
    //         }
    //     }
    //     finally
    //     {
    //         IsBusy = false;
    //         StateHasChanged();
    //     }
    // }

    private static string FormatBytes(long bytes)
    {
        if (bytes <= 0) return "0 B";
        string[] units = ["B", "KB", "MB", "GB"];
        var pow = (int)Math.Floor(Math.Log(bytes, 1024));
        pow = Math.Clamp(pow, 0, units.Length - 1);
        var val = bytes / Math.Pow(1024, pow);
        return $"{val:0.##} {units[pow]}";
    }

    // private static JsonSerializerOptions JsonOptions() => new()
    // {
    //     PropertyNameCaseInsensitive = true,
    //     DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
    // };

    private static Color StateColor(FileState state) => state switch
    {
        FileState.Ready => Color.Info,
        FileState.Uploading => Color.Warning,
        FileState.Done => Color.Success,
        FileState.Error => Color.Error,
        _ => Color.Default
    };

    private static string StateLabel(FileState state) => state switch
    {
        FileState.Ready => "Ready",
        FileState.Uploading => "Uploading…",
        FileState.Done => "Done",
        FileState.Error => "Error",
        _ => "—"
    };
}