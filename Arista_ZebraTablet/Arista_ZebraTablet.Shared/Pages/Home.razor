@page "/"
@using System.Net.Http.Headers
@using System.Text.Json
@using System.Text.Json.Serialization
@using Arista_ZebraTablet.Shared.Services
@inject IFormFactor FormFactor
@* @inject HttpClient Http *@

<PageTitle>ARISTA - Batch Barcode Scanner</PageTitle>

<MudButton Variant="Variant.Filled">Default</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary">Primary</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Secondary">Secondary</MudButton>
<MudButton Variant="Variant.Filled" Disabled="true">Disabled</MudButton>

<MudPaper Class="pa-16 ma-2">
    <header class="hero">
        <h1>Batch Barcode Scanner</h1>
        <p class="subtitle">
            Upload one or more product images to detect barcodes. Works on @factor using @platform.
        </p>
        <ul class="instructions">
            <li>Select multiple images at once (JPG/PNG/HEIC).</li>
            <li>On mobile web, the camera may open directly.</li>
            <li>Click “Send to Python” to run detection and get results for each image.</li>
        </ul>
    </header>
</MudPaper>

@* <section class="uploader">
    <div class="actions">
        <label for="fileInput" class="btn primary">
            <span>➕ Add images</span>
        </label>
        <button class="btn" @onclick="ClearAll" disabled="@(!Selected.Any())">🧹 Clear all</button>
    </div>

    <InputFile id="fileInput"
                multiple
                accept="image/*"
                capture="environment"
                OnChange="OnFilesSelected"
                style="display:none" />

    <div class="dropzone">
        <div class="dropzone-content">
            <div class="drop-icon">📷</div>
            <div class="drop-title">Drop images here or click <label for="fileInput" class="link">browse</label></div>
            <div class="drop-subtitle">Supported: .jpg, .jpeg, .png, .heic</div>
        </div>
    </div>

    @if (Selected.Any())
    {
        <div class="thumbs">
            @foreach (var img in Selected)
            {
                <div class="card">
                    <div class="thumb">
                        @img.PreviewDataUrl
                    </div>
                    <div class="meta">
                        <div class="name" title="@img.FileName">@img.FileName</div>
                        <div class="size">@FormatBytes(img.Bytes?.Length ?? 0)</div>
                    </div>
                    <div class="status">
                        @if (img.State == FileState.Ready)
                        {
                            <span class="chip info">Ready</span>
                        }
                        else if (img.State == FileState.Uploading)
                        {
                            <span class="chip warn">Uploading…</span>
                        }
                        else if (img.State == FileState.Done && (img.Result?.Barcodes?.Any() ?? false))
                        {
                            <span class="chip ok">Detected</span>
                        }
                        else if (img.State == FileState.Done)
                        {
                            <span class="chip neutral">No codes</span>
                        }
                        else if (img.State == FileState.Error)
                        {
                            <span class="chip error">Error</span>
                        }
                    </div>
                    <button class="icon-btn"
                            title="Remove"
                            @onclick="@(() => Remove(img.Id))">✖</button>
                </div>
            }
        </div>

        <div class="submit-row">
            <button class="btn primary lg"
                    @onclick="SendToPythonAsync"
                    disabled="@IsBusy">
                @(IsBusy ? "Processing…" : "Send to Python")
            </button>
            @if (IsBusy)
            {
                <div class="progress">
                    <div class="bar" style="width:@Progress%"></div>
                </div>
            }
        </div>
    }
</section> *@

@code {
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();

    // TODO: set this to your actual Python API endpoint
    // e.g. "https://api.yourdomain.com/barcode/detect"
    private const string ApiEndpoint = "/api/barcodes/detect";

    private const long MaxFileBytes = 20L * 1024 * 1024; // 20 MB per file
    private readonly string[] AllowedContentTypes = new[] { "image/jpeg", "image/png", "image/heic", "image/heif" };

        // -------     -------
    private enum FileState { Ready, Uploading, Done, Error }

    private class UploadItem
    {
        public Guid Id { get; set; }
        public string? FileName { get; set; }
        public string? ContentType { get; set; }
        public byte[]? Bytes { get; set; }
        public string? PreviewDataUrl { get; set; }
        public FileState State { get; set; }
        public string? ErrorMessage { get; set; }
        public DetectResult? Result { get; set; }
    }

    private class DetectResult
    {
        public List<BarcodeDto> Barcodes { get; set; } = new();
    }

    private class BarcodeDto
    {
        public string? Value { get; set; }
        public string? Symbology { get; set; }
        public double? Confidence { get; set; } // 0..1
    }

    // Server response shapes we try to parse
    private class DetectResponseEnvelope
    {
        [JsonPropertyName("items")] public List<DetectResponseItem>? Items { get; set; }
    }

    private class DetectResponseItem
    {
        [JsonPropertyName("fileName")] public string? FileName { get; set; }
        [JsonPropertyName("barcodes")] public List<DetectResponseBarcode>? Barcodes { get; set; }
        [JsonPropertyName("error")] public string? Error { get; set; }
    }

    private class DetectResponseBarcode
    {
        [JsonPropertyName("value")] public string? Value { get; set; }
        [JsonPropertyName("symbology")] public string? Symbology { get; set; }
        [JsonPropertyName("confidence")] public double? Confidence { get; set; }
    }
}