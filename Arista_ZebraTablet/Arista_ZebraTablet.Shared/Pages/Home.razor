@page "/"

@* @using System.Net.Http.Headers *@
@* @using System.Text.Json
@using System.Text.Json.Serialization *@
@using Arista_ZebraTablet.Shared.Application.DTOs
@using Arista_ZebraTablet.Shared.Application.Enums
@using Arista_ZebraTablet.Shared.Application.ViewModels

@inject IFormFactorService FormFactor
@inject IBarcodeScannerService Scanner
@inject UploadBarcodeDecoderService DecoderService
@* @inject HttpClient Http *@

<PageTitle>Home | @AppConstant.AppTitle</PageTitle>

<MudGrid Spacing="4">
    <MudItem xs="12">
        <MudPaper Class="pa-5" Elevation="0">
            <MudStack Spacing="3" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                <MudStack Spacing="2" AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h5" Class="fw-bold">Scan Barcodes</MudText>
                    <MudText Typo="Typo.body2" Class="text-center">
                        Upload one or more images and tap <b>Detect Barcode</b> to begin.<br/>
                    </MudText>
                </MudStack>

                <!-- Detect Barcodes Button -->
                <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="2">
                    <MudButton
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        StartIcon="material-symbols-rounded/scan"
                        Disabled="@(!uploadedImageFiles.Any() || isBusy)"
                        DropShadow="false"
                        Size="Size.Large"
                        Class="px-6"
                        OnClick="DecodeBarcodes"
                    >
                        @(isBusy ? "Processing..." : "Detect Barcodes")
                    </MudButton>
                </MudStack>

                <!-- Helpful reason when disabled -->
                @if (!uploadedImageFiles.Any() && !isBusy)
                {
                    <MudText Typo="Typo.caption" Align="Align.Center" Class="text-center">
                        Add at least one image to enable barcode detection.
                    </MudText>
                }
            </MudStack>

            <!-- Barcode Decoding Progress -->
            <MudCollapse Class="w-100" Expanded="isBusy">
                <MudStack Class="mt-3" Spacing="0" AlignItems="AlignItems.Center">
                    <MudProgressLinear Value="@decodeProgress" Color="Color.Info" Rounded />
                    <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-1">
                        Detecting barcodes... @decodeProgress%
                    </MudText>
                </MudStack>
            </MudCollapse>
        </MudPaper>
    </MudItem>

    @if (factor == "Phone")
    {
        <!-- Phone: Toolbar Section for Uploading Images -->
        <MudPaper Class="pb-8 w-100 bg-transparent position-fixed bottom-0 start-50 translate-middle-x" Elevation="0">
            <MudStack Row Spacing="2" AlignItems="AlignItems.Center" Justify="Justify.Center">
                <!-- Image File picker -->
                <MudFileUpload
                    T="IReadOnlyList<IBrowserFile>"
                    Accept=".jpg,.jpeg,.png,.heic,.heif,image/*"
                    FilesChanged="UploadImageFilesAsync"
                >
                    <ActivatorContent>
                        <MudTooltip Text="Upload Images" Placement="Placement.Top" Delay="250" Arrow>
                            <MudFab
                                Label="@(isUploadingImg ? $"Uploading... {uploadImgProgress}%" : "Upload Images")"
                                Color="Color.Primary"
                                StartIcon="@Icons.Material.Outlined.FileUpload"
                                Disabled="@isUploadingImg"
                            />
                        </MudTooltip>
                    </ActivatorContent>
                </MudFileUpload>

                <MudTooltip Text="Scan Barcodes" Placement="Placement.Top" Delay="250" Arrow>
                    <MudFab Color="Color.Primary" StartIcon="material-symbols-rounded/barcode_scanner" OnClick="OpenScanner"/>
                </MudTooltip>

                <MudTooltip Text="Clear All" Placement="Placement.Top" Delay="250" Arrow>
                    <MudFab
                        Color="Color.Warning"
                        StartIcon="@Icons.Material.Rounded.ClearAll"
                        Disabled="@(!uploadedImageFiles.Any() || isBusy)"
                        OnClick="ClearAllUploadedImagesConfirmationAsync"
                    />
                </MudTooltip>
            </MudStack>
        </MudPaper>
    }
    else
    {
        <!-- Web: Toolbar Section for Uploading Images -->
        <MudItem xs="12">
            <MudStack Row Spacing="2" Justify="Justify.FlexEnd">
                <MudTooltip Text="Clear All" Placement="Placement.Top" Delay="250" Arrow>
                    <MudButton StartIcon="@Icons.Material.Rounded.ClearAll" Color="Color.Warning" Variant="Variant.Outlined" Disabled="@(!uploadedImageFiles.Any() || isBusy)" OnClick="ClearAllUploadedImagesConfirmationAsync">
                        Clear All
                    </MudButton>
                </MudTooltip>

                <!-- Image File picker -->
                <MudFileUpload
                    T="IReadOnlyList<IBrowserFile>"
                    Accept=".jpg,.jpeg,.png,.heic,.heif,image/*"
                    FilesChanged="UploadImageFilesAsync"
                >
                    <ActivatorContent>
                        <MudTooltip Text="Upload Images" Placement="Placement.Top" Delay="250" Arrow>
                            <MudButton StartIcon="@Icons.Material.Outlined.FileUpload" Color="Color.Primary" Variant="Variant.Filled" DropShadow="false" Disabled="@isUploadingImg">
                                @(isUploadingImg ? $"Uploading... {uploadImgProgress}%" : "Upload Images")
                            </MudButton>
                        </MudTooltip>
                    </ActivatorContent>
                </MudFileUpload>
            </MudStack>
        </MudItem>
    }

    <MudItem xs="12">
        <MudPaper Elevation="0">
            <MudTabs Class="pa-3" ActiveTabClass="fw-bold" PanelClass="py-2" Elevation="0" ApplyEffectsToContainer Rounded Centered>
                <MudTabPanel Text="Uploaded Images">
                    <!-- Uploading Images Progress -->
                    <MudCollapse Class="w-100" Expanded="isUploadingImg">
                        <MudProgressLinear class="my-1" Color="Color.Info" Indeterminate Rounded/>
                    </MudCollapse>

                    <MudPaper Class="py-2" Elevation="0" MaxHeight="50vh" Style="overflow: auto">
                        <!-- Uploaded Image File Preview Cards -->
                        @if (uploadedImageFiles.Any())
                        {
                            <MudStack Class="h-100 px-2" Spacing="2">
                                @foreach (var img in uploadedImageFiles)
                                {
                                    <!-- Image File Preview Card -->
                                    <MudCard Elevation="0" Style="max-height:84px; min-height:72px;" Outlined>
                                        <MudCardContent Class="d-flex flex-row align-center px-5 py-3">
                                            <!-- Thumbnail Image -->
                                            @if (!string.IsNullOrWhiteSpace(img.PreviewDataUrl))
                                            {
                                                <MudLink OnClick="() => OpenPreviewImgDialogAsync(img.Id)">
                                                    <MudImage
                                                        Src="@img.PreviewDataUrl"
                                                        Class="rounded-lg me-3"
                                                        Width="56"
                                                        Height="56"
                                                        ObjectFit="ObjectFit.Cover"
                                                    />
                                                </MudLink>
                                            }
                                            else
                                            {
                                                <MudAvatar Class="me-3" Size="Size.Large" Color="Color.Default" Rounded>
                                                    <MudIcon Icon="@Icons.Material.Rounded.Image" />
                                                </MudAvatar>
                                            }

                                            <!-- Image Information -->
                                            <MudStack Spacing="1" Class="overflow-hidden">
                                                <MudText Typo="Typo.subtitle2" Style="white-space:nowrap; overflow:hidden; text-overflow:ellipsis;">
                                                    @img.FileName
                                                </MudText>

                                                <MudStack Row Spacing="1">
                                                    <MudChip T="ImgItemViewModel" Color="@ImageFileStateColor(img.State)" Size="Size.Small">
                                                        @ImageFileStateLabel(img.State)
                                                    </MudChip>

                                                    @if (img.State == FileState.Done && (img.DetectResult?.Barcodes?.Any() ?? false))
                                                    {
                                                        <MudChip T="ImgItemViewModel" Color="Color.Success" Variant="Variant.Outlined">
                                                            @($"{img.DetectResult!.Barcodes.Count} barcode(s) detected")
                                                        </MudChip>
                                                    }
                                                </MudStack>

                                                @if (img.State == FileState.Error && !string.IsNullOrWhiteSpace(img.ErrorMessage))
                                                {
                                                    <MudText Typo="Typo.caption" Color="Color.Error">@img.ErrorMessage</MudText>
                                                }
                                            </MudStack>

                                            <MudSpacer />

                                            <!-- Delete Image Button -->
                                            <MudTooltip Text="Delete" Placement="Placement.Left" Delay="250" Arrow>
                                                <MudIconButton
                                                    Icon="@Icons.Material.Filled.Delete"
                                                    Color="Color.Error"
                                                    Size="Size.Small"
                                                    Disabled="@isBusy"
                                                    OnClick="@(() => Remove(img.Id))"
                                                />
                                            </MudTooltip>
                                        </MudCardContent>
                                    </MudCard>
                                }
                            </MudStack>
                        }
                        else
                        {
                            <MudStack Spacing="2" AlignItems="AlignItems.Center">
                                <MudIcon Icon="material-symbols-rounded/hide_image" Class="text-muted" Style="font-size: 5rem;" />
                                <MudText Typo="Typo.subtitle2" Class="text-muted">
                                    No Uploaded Images
                                </MudText>
                            </MudStack>
                        }
                    </MudPaper>
                </MudTabPanel>

                <MudTabPanel Text="Results">
                    <MudPaper Class="py-2" Elevation="0" MaxHeight="50vh" Style="overflow: auto">
                        <!-- Results -->
                        @if (uploadedImageFiles.Any(s => s.DetectResult != null || s.State == FileState.Error))
                        {
                            @foreach (var img in uploadedImageFiles)
                            {
                                <MudDivider Class="my-3" />

                                <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                                    <MudText Typo="Typo.subtitle1">@img.FileName</MudText>
                                    <MudChip T="BarcodeDto" Color="@ImageFileStateColor(img.State)" Variant="Variant.Outlined" Dense>
                                        @ImageFileStateLabel(img.State)
                                    </MudChip>
                                </MudStack>

                                @if (img.State == FileState.Error)
                                {
                                    <MudAlert Severity="Severity.Error" Class="mt-2">@img.ErrorMessage</MudAlert>
                                }
                                else if (img.DetectResult?.Barcodes?.Any() ?? false)
                                {
                                    @* <MudTable T="ScanBarcodeItemViewModel" Dense Hover Class="mt-2"> *@
                                    <MudTable Items="img.DetectResult.Barcodes" Dense Hover Class="mt-2">
                                        <HeaderContent>
                                            <MudTh>#</MudTh>
                                            <MudTh>Value</MudTh>
                                            <MudTh>Category</MudTh>
                                            <MudTh>Barcode Type</MudTh>
                                            <MudTh>Time</MudTh>
                                        </HeaderContent>
                                        <ChildRowContent>
                                            @for (int i = 0; i < img.DetectResult!.Barcodes.Count; i++)
                                            {
                                                var b = img.DetectResult.Barcodes[i];
                                                <MudTr>
                                                    <MudTd>@(i + 1)</MudTd>
                                                    <MudTd>@b.Value</MudTd>
                                                    <MudTd>@b.Category</MudTd>
                                                    <MudTd>@b.BarcodeType</MudTd>
                                                    <MudTd>@b.Time.ToString("g")</MudTd>
                                                </MudTr>
                                            }
                                        </ChildRowContent>
                                    </MudTable>
                                }
                                else if (img.State == FileState.Done)
                                {
                                    <MudText Typo="Typo.body2" Class="text-secondary mt-1">No barcodes</MudText>
                                }
                            }
                        }
                        else
                        {
                            <MudStack Spacing="2" AlignItems="AlignItems.Center">
                                <MudIcon Icon="@Icons.Material.Rounded.SearchOff" Class="text-muted" Style="font-size: 5rem;" />
                                <MudText Typo="Typo.subtitle2" Class="text-muted">
                                    No Result Found
                                </MudText>
                            </MudStack>
                        }
                    </MudPaper>
                </MudTabPanel>
            </MudTabs>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();

    // WebApp: relative OK. MAUI: make this ABSOLUTE (e.g., "https://api.example.com/api/barcodes/detect").
    // private const string ApiEndpoint = "/api/barcodes/detect";

    private const long maxFileBytes = 20L * 1024 * 1024; // 20 MB per file
    private static readonly string[] allowedContentTypes = { "image/jpeg", "image/png", "image/heic", "image/heif" };

    private List<ImgItemViewModel> uploadedImageFiles { get; } = new();
    private bool isBusy { get; set; }
    private bool isUploadingImg { get; set; }
    private int decodeProgress { get; set; }
    private int uploadImgProgress { get; set; }


    private async Task OpenScanner() => await Scanner.NavigateToScannerAsync();

    // MULTI-FILE handler (preferred)
    private async Task UploadImageFilesAsync(IReadOnlyList<IBrowserFile> files)
    {
        if (files == null || files.Count == 0)
            return;

        isUploadingImg = true;
        uploadImgProgress = 0;

        var totalFiles = files.Count;
        double processedFile = 0;

        try
        {
            foreach (var file in files)
            {
                await AddImageFileAsync(file);

                processedFile++;
                uploadImgProgress = Math.Clamp(
                    (int)Math.Round(processedFile / totalFiles * 100.0),
                    0, 100);

                StateHasChanged();
                await Task.Yield();
            }

            // Ensure it lands on 100 after loop (even if rounding)
            uploadImgProgress = 100;
        }
        finally
        {
            isUploadingImg = false;
            StateHasChanged();
        }
    }


    // If you change T="IBrowserFile", use this single-file overload instead:
    // private async Task UploadImageFilesAsync(IBrowserFile file) => await AddImageFileAsync(file);
    private async Task AddImageFileAsync(IBrowserFile file)
    {
        var contentType = string.IsNullOrWhiteSpace(file.ContentType) ? "image/jpeg" : file.ContentType.ToLowerInvariant();
        if (!allowedContentTypes.Contains(contentType) && !contentType.StartsWith("image/"))
            return;

        try
        {
            await using var readFile = file.OpenReadStream(maxFileBytes);
            using var ms = new MemoryStream();
            await readFile.CopyToAsync(ms);

            var bytes = ms.ToArray();
            var preview = $"data:{contentType};base64,{Convert.ToBase64String(bytes)}";

            uploadedImageFiles.Add(new ImgItemViewModel
            {
                Id = Guid.NewGuid(),
                FileName = string.IsNullOrWhiteSpace(file.Name) ? $"{Guid.NewGuid():N}.jpg" : file.Name,
                ContentType = contentType,
                Bytes = bytes,
                PreviewDataUrl = preview,
                State = FileState.Ready
            });
        }
        catch (Exception ex)
        {
            uploadedImageFiles.Add(new ImgItemViewModel
            {
                Id = Guid.NewGuid(),
                FileName = file.Name ?? "image",
                ContentType = contentType,
                State = FileState.Error,
                ErrorMessage = ex.Message
            });
        }
        StateHasChanged();
    }

    private void Remove(Guid id)
    {
        var indexPosition = uploadedImageFiles.FindIndex(x => x.Id == id);
        if (indexPosition >= 0) uploadedImageFiles.RemoveAt(indexPosition);
    }

    /// <summary>
    /// Displays a confirmation dialog asking the user to confirm clearing all
    /// uploaded images currently shown in the list.
    /// </summary>
    private async Task ClearAllUploadedImagesConfirmationAsync()
    {
        var parameters = new DialogParameters<ConfirmationDialog>
        {
            { x => x.ContentText, "Clear all uploaded images?" },
            { x => x.SubmitBtnText, "Clear" },
            { x => x.DialogIcon, Icons.Material.Rounded.Warning },
            { x => x.DialogIconColor, Color.Error }
        };
        var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Clear", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            uploadedImageFiles.Clear();
            isBusy = false;
            decodeProgress = 0;
        }
    }

    // private async Task DecodeBarcodes()
    // {
    //     isBusy = true;
    //     decodeProgress = 5;

    //     try
    //     {
    //         using var form = new MultipartFormDataContent();
    //         int idx = 0;
    //         foreach (var item in uploadedImageFiles)
    //         {
    //             if (item.Bytes is null) continue;
    //             item.State = FileState.Detecting;

    //             var content = new ByteArrayContent(item.Bytes);
    //             content.Headers.ContentType = new MediaTypeHeaderValue(item.ContentType ?? "image/jpeg");
    //             form.Add(content, "files", item.FileName);

    //             idx++;
    //             decodeProgress = Math.Clamp(5 + (int)((double)idx / uploadedImageFiles.Count * 40), 5, 50);
    //         }

    //         await Task.Delay(5000);
    //         var resp = await Http.PostAsync(ApiEndpoint, form);
    //         var text = await resp.Content.ReadAsStringAsync();

    //         List<DetectResponseImgItemDto>? items = null;
    //         try
    //         {
    //             items = JsonSerializer.Deserialize<List<DetectResponseItem>>(text, JsonOptions());
    //         }
    //         catch
    //         {
    //             try
    //             {
    //                 var envelope = JsonSerializer.Deserialize<DetectResponseEnvelope>(text, JsonOptions());
    //                 items = envelope?.Items;
    //             }
    //             catch { /* fall through */ }
    //         }

    //         decodeProgress = 75;

    //         if (items is not null)
    //         {
    //             var byName = items
    //                 .Where(x => !string.IsNullOrWhiteSpace(x.FileName))
    //                 .ToDictionary(x => x.FileName!, StringComparer.OrdinalIgnoreCase);

    //             foreach (var item in uploadedImageFiles)
    //             {
    //                 if (item.Bytes is null) { item.State = FileState.Error; continue; }

    //                 if (byName.TryGetValue(item.FileName!, out var r))
    //                 {
    //                     if (!string.IsNullOrWhiteSpace(r.Error))
    //                     {
    //                         item.State = FileState.Error;
    //                         item.ErrorMessage = r.Error;
    //                     }
    //                     else
    //                     {
    //                         item.DetectResult ??= new DetectResultViewModel();
    //                         item.DetectResult.Barcodes = r.Barcodes?.Select(b => new ScanBarcodeItemViewModel
    //                         {
    //                             Value = b.Value,
    //                             Category = BarcodeClassifier.Classify(b.Value),
    //                             BarcodeType = b.Symbology ?? "Unknown",
    //                             Time = DateTimeOffset.Now
    //                         }).ToList() ?? new();
    //                     }
    //                 }
    //                 else
    //                 {
    //                     item.DetectResult ??= new DetectResultViewModel { Barcodes = new() };
    //                     item.State = FileState.Done;
    //                 }
    //             }
    //         }
    //         else
    //         {
    //             foreach (var item in uploadedImageFiles)
    //             {
    //                 item.State = FileState.Error;
    //                 item.ErrorMessage ??= $"Server response: {text}";
    //             }
    //         }
    //         decodeProgress = 100;
    //     }
    //     catch (Exception ex)
    //     {
    //         foreach (var item in uploadedImageFiles)
    //         {
    //             item.State = FileState.Error;
    //             item.ErrorMessage ??= ex.Message;
    //         }
    //     }
    //     finally
    //     {
    //         isBusy = false;
    //         StateHasChanged();
    //     }
    // }

    private async Task DecodeBarcodes()
    {
        isBusy = true;
        decodeProgress = 5;

        try
        {
            int idx = 0;
            foreach (var item in uploadedImageFiles)
            {
                if (item.Bytes is null)
                {
                    item.State = FileState.Error;
                    continue;
                }

                item.State = FileState.Detecting;
                StateHasChanged();

                await Task.Delay(100); // Optional delay for UI feedback

                // Use your decoder service
                var results = DecoderService.DecodeFromImage(item.Bytes);

                item.DetectResult = new DetectResultViewModel
                {
                    Barcodes = results
                };

                item.State = FileState.Done;

                idx++;
                decodeProgress = Math.Clamp(5 + (int)((double)idx / uploadedImageFiles.Count * 95), 5, 100);
            }

            decodeProgress = 100;
        }
        catch (Exception ex)
        {
            foreach (var item in uploadedImageFiles)
            {
                item.State = FileState.Error;
                item.ErrorMessage ??= ex.Message;
            }
        }
        finally
        {
            isBusy = false;
            StateHasChanged();
        }
    }

    private static string FormatBytes(long bytes)
    {
        if (bytes <= 0) return "0 B";
        string[] units = ["B", "KB", "MB", "GB"];
        var pow = (int)Math.Floor(Math.Log(bytes, 1024));
        pow = Math.Clamp(pow, 0, units.Length - 1);
        var val = bytes / Math.Pow(1024, pow);
        return $"{val:0.##} {units[pow]}";
    }

    // private static JsonSerializerOptions JsonOptions() => new()
    // {
    //     PropertyNameCaseInsensitive = true,
    //     DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
    // };

    private static Color ImageFileStateColor(FileState state) => state switch
    {
        FileState.Ready => Color.Info,
        FileState.Detecting => Color.Warning,
        FileState.Done => Color.Success,
        FileState.Error => Color.Error,
        _ => Color.Default
    };

    private static string ImageFileStateLabel(FileState state) => state switch
    {
        FileState.Ready => "Ready",
        FileState.Detecting => "Detecting...",
        FileState.Done => "Done",
        FileState.Error => "Error",
        _ => "—"
    };

    // Open dialog for previewing images.
    private async Task OpenPreviewImgDialogAsync(Guid imgFileId)
    {
        if (uploadedImageFiles == null || uploadedImageFiles.Count == 0)
        {
            Snackbar.Add("No images to preview.", Severity.Warning);
            return;
        }

        // Resolve starting index; default to 0 if the id is not found
        var index = uploadedImageFiles.FindIndex(x => x.Id == imgFileId);
        if (index < 0) index = 0;

        var parameters = new DialogParameters<PreviewImgDialog>
        {
            { x => x.ImageFiles, uploadedImageFiles },   // pass the SAME list instance
            { x => x.SelectedFileIndex, index },         // start at resolved index
        };
        var options = new DialogOptions() { NoHeader = true, CloseOnEscapeKey = true, MaxWidth = MaxWidth.Large, FullWidth = true };

        try
        {
            var dialog = await DialogService.ShowAsync<PreviewImgDialog>("Preview Image", parameters, options);
            var result = await dialog.Result;
            return;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to open image preview: {ex.Message}", Severity.Error);
        }
    }

    // private async Task ScanAsync()
    // {
    //     try
    //     {
    //         var result = await Scanner.ScanAsync();
    //         if (!string.IsNullOrWhiteSpace(result))
    //         {
    //             Snackbar.Add($"Scanned: {result}", Severity.Success);
    //         }
    //         else
    //         {
    //             Snackbar.Add("No barcode detected.", Severity.Info);
    //         }
    //     }
    //     catch (TaskCanceledException) { /* user canceled }
    //     catch (Exception ex)
    //     {
    //         Snackbar.Add($"Scan failed: {ex.Message}", Severity.Error);
    //     }
    // }
}