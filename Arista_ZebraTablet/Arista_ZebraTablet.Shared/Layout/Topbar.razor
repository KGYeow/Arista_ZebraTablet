@inject NavigationManager Nav

<MudAppBar Class="topbar" ToolBarClass="gap-4" Dense>
    <!-- Left Content -->
    @if (LeftContent != null)
    {
        @LeftContent
    }

    @if (!string.IsNullOrWhiteSpace(LogoSrc))
    {
        <MudLink Href="@LogoHref" Class="d-flex align-center">
            <MudImage Src="@LogoSrc" Height="@LogoHeight"/>
        </MudLink>
    }

    <!-- Topbar Title -->
    @if (!string.IsNullOrWhiteSpace(Title))
    {
        <MudText Class="fw-bold" Typo="Typo.subtitle1">@Title</MudText>
    }

    <!-- Inline Navigation (Desktop) -->
    @if (NavItems != null && NavItems.Any())
    {
        <MudStack Class="navigation" Spacing="2" Row>
            @foreach (var item in NavItems)
            {
                <MudButton
                    Href="@item.Href"
                    Variant="Variant.Text"
                    Class=""
                    StartIcon="@(string.IsNullOrEmpty(item.Icon) ? null : item.Icon)"
                    Color="@(IsActive(item.Href) ? Color.Tertiary : Color.Inherit)"
                    Style="text-transform: none"
                >
                    @item.Title
                </MudButton>
            }
        </MudStack>
    }

    <MudSpacer />

    <!-- Right Content -->
    @if (RightContent != null)
    {
        @RightContent
    }
</MudAppBar>

@code {
    [Parameter] public string? Title { get; set; }
    [Parameter] public IEnumerable<NavItemModel>? NavItems { get; set; }
    [Parameter] public RenderFragment? LeftContent { get; set; }
    [Parameter] public RenderFragment? RightContent { get; set; }
    [Parameter] public string? LogoSrc { get; set; }
    [Parameter] public string LogoHref { get; set; } = "/";
    [Parameter] public int LogoHeight { get; set; } = 28;           // in unit px

    // Simple nav item model
    public record NavItemModel(string Title, string Href, string? Icon = null);

    // Invoked whenever component parameters are set or changed
    protected override void OnParametersSet()
    {
    }

    // Action on component initialization
    protected override void OnInitialized()
    {
    }

    private bool IsActive(string href)
    {
        var current = Nav.ToBaseRelativePath(Nav.Uri).TrimEnd('/');
        var target = href.TrimStart('/').TrimEnd('/');
        return string.Equals(current, target, StringComparison.OrdinalIgnoreCase)
               || (!string.IsNullOrEmpty(target) && current.StartsWith(target + "/", StringComparison.OrdinalIgnoreCase));
    }
}